float sdSphere( vec3 p, float s )
{
  return length(p)-s;
}

float sdBox( vec3 p, vec3 b )
{
  vec3 d = abs(p) - b;
  return min(max(d.x,max(d.y,d.z)),0.0) +
         length(max(d,0.0));
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    vec3 eye = vec3(0, 0, -5);
    vec3 up = vec3(0, 1, 0);
    vec3 right = vec3(1, 0, 0);
    float epsilon = 0.001;
    float maxDistance = 100.0;

    //vec2 uv = fragCoord.xy / iResolution.xy;
	
	vec2 ndcXY = -1.0 + 2.0 * fragCoord.xy / iResolution.xy;
	
	// aspect ratio
	float aspectRatio = iResolution.x / iResolution.y;
	
	// scaled XY which fits the aspect ratio
	vec2 uv = ndcXY * vec2( aspectRatio, 1.0 );
	
	
    float focalLength = 2.0;
    vec3 forward = normalize(cross(right, up));
    
    vec3 planePos = right * uv.x + up * uv.y;
	
    vec3 pImagePlane = eye + forward * focalLength + planePos;
    vec3 rayDirection = normalize(pImagePlane - eye);

    vec4 color = vec4(0,0.5*(sin(iGlobalTime*2.0) + 1.5),0,1); // Sky color

    float t = 0.0;
    const float maxSteps = 16.0;
    for(float i = 0.0; i < maxSteps; ++i)
    {
        vec3 p = pImagePlane + rayDirection * t;
        //float d = length(p) - 0.5; // Distance to sphere of radius 0.5
        float d = sdSphere(p, 1.0 + sin(iGlobalTime));
		if(d > maxDistance) {break;}
        if(d < epsilon)
        {
			color = vec4(i*0.1+0.1,0.2,0.5,0);
            break;
        }

        t += d;
    }

    fragColor = color;
}