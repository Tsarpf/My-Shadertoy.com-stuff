//vec3 camPos = (0, 3, 0);
//vec3 camPos = vec3(0.0, 0.0, iGlobalTime * 60.0);
vec3 camPos = vec3(0.0, 0.0, iGlobalTime * 6.0);

float sdSphere( vec3 p, float s )
{
  return length(p)-s;
}

float lengthRound(vec3 p)
{
	float n = 1.7;
	return pow(pow(p.x,n) + pow(p.y,n) + pow(p.z,n), 1.0/n);
}

float sdBox( vec3 p, vec3 b )
{
  vec3 d = abs(p) - b;
  
  //float lengthRounded = lengthRound(max(d,0.0));
  //return min(max(d.x,max(d.y,d.z)),0.0) + lengthRounded;
  return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));
}

vec3 repeatPos(vec3 p, vec3 c)
{
    vec3 result = mod(p,c) - 0.5 * c;
    //result.y -= sin(result.x * 1.0);
	return result;
}

float getDistance(vec3 position)
{	
    //position.y -= iGlobalTime * 10.0;
    position.x -= sin(position.z);
    //position.y += sin(iGlobalTime) * 10.0;
    //position.x += sin(iGlobalTime * 2.0) * 20.0;
    //position.x += sin(iGlobalTime * 2.0) * 20.0;
	vec3 repPos = repeatPos(position, vec3(1.0,20.0,2.0));
    //repPos.y += sin(repPos.x);
    
	//repPos.z += sin(iGlobalTime);
	return sdBox(repPos, vec3(.2,.2,.2));
	//return sdSphere(position, 1.0 + sin(iGlobalTime));
	
	//return sdSphere(position, 1.0);
	//return sdSphere(repPos, 1.0);
}

vec4 getColor(vec3 position)
{
	float e = 0.01;
	float f0 = getDistance(position);
	
	float fx = getDistance(vec3(position.x + e, position.y, position.z));
	float fy = getDistance(vec3(position.x, position.y + e, position.z));
	float fz = getDistance(vec3(position.x, position.y, position.z + e));
	
	
	
	vec3 normal = normalize(vec3(fx - f0, fy - f0, fz - f0));
	vec3 lightPosition = camPos;//vec3
	//	(
	//		0.0, //+ 12.0*sin(iGlobalTime*1.0),
	//		3.0, //+ 12.0*sin(iGlobalTime*2.0),
    //        iGlobalTime * 60.0//+ sin(iGlobalTime * 1.0) * 250.0 + 200.0
    //        //10.0
	//		//280.0 + 300.0*sin(iGlobalTime*1.0)
	//		//iGlobalTime * 5.0 + 100.0
	//	);
	vec3 lightDir = normalize(lightPosition - position);
	vec4 lightColor = vec4(0.0,0.6,0.0,0.2);
	vec4 lightIntensity = lightColor * dot(normal, lightDir);
	float reflectance = 0.5;
	
	float lightDistance = length(position-lightPosition);
	float distanceIntensity = (1.0 / (pow(lightDistance / 100.0, 1.1)));
	
	return reflectance * lightIntensity * (distanceIntensity);
	
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    //vec3 eye = vec3(0, 3, iGlobalTime * 60.0);
    vec3 eye = camPos;
	//vec3 eye = vec3(0, 3, 0);
	//eye.z = -1.0*sin(iGlobalTime);
    vec3 up = vec3(0, 1, 0);
    vec3 right = vec3(1, 0, 0);
    float epsilon = 0.1;
    float maxDistance = 100000.0;

    //vec2 uv = fragCoord.xy / iResolution.xy;

	vec2 ndcXY = -1.0 + 2.0 * fragCoord.xy / iResolution.xy;
	
	// aspect ratio
	float aspectRatio = iResolution.x / iResolution.y;
	
	// scaled XY which fits the aspect ratio
	vec2 uv = ndcXY * vec2( aspectRatio, 1.0 );
	//uv.y += (0.07 * sin(uv.x + iGlobalTime*4.0));

	
	
    float focalLength = 1.0;
    vec3 forward = normalize(cross(right, up));
    
    vec3 planePos = right * uv.x + up * uv.y;
	
    vec3 pImagePlane = eye + forward * focalLength + planePos;
    vec3 rayDirection = normalize(pImagePlane - eye);

	// Sky color
    vec4 color = vec4
		(
			0.0,
			0.2,
			0.2,
			1
		); 

    float t = 0.0;
    const float maxSteps = 512.0;
    for(float i = 0.0; i < maxSteps; ++i)
    {
        vec3 p = pImagePlane + rayDirection * t;
        //float d = length(p) - 0.5; // Distance to sphere of radius 0.5
		float d = getDistance(p);
		if(d > maxDistance) {break;}
        if(d < epsilon)
        {
		
			//color = vec4(i*0.1+0.1,0.5,0,1);
			color = getColor(p);
            break;
        }

        t += d;
    }

    fragColor = color;
}